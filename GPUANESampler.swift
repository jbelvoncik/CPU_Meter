//
//  GPUANESampler.swift
//  CPU_Meter
//
//  Reads GPU and ANE power (W) from powermetrics --samplers smc
//  and maps them to an approximate 0–100 % utilization range.
//
//  This file and logic were generated by ChatGPT (GPT-5)
//  for Jozef Belvončik, purely educational.
//
//  © 2025 Jozef Belvončik MIT License
//

import Foundation

final class GPUANESampler: ObservableObject {
    @Published var gpuPercent: Double = 0
    @Published var anePercent: Double = 0
    private var timer: Timer?

    init(interval: TimeInterval = 1.0) {
        update()
        timer = .scheduledTimer(withTimeInterval: interval, repeats: true) { [weak self] _ in
            self?.update()
        }
        RunLoop.main.add(timer!, forMode: .common)
    }
    deinit { timer?.invalidate() }

    private func update() {
        // Capture one powermetrics sample (1 s)
        let task = Process()
        task.launchPath = "/usr/bin/env"
        task.arguments = ["bash", "-c", "sudo -n powermetrics -n 1 -i 1000 --samplers smc 2>/dev/null | grep -E 'GPU Power|ANE Power'"]
        let pipe = Pipe()
        task.standardOutput = pipe
        try? task.run()

        let data = pipe.fileHandleForReading.readDataToEndOfFile()
        guard let output = String(data: data, encoding: .utf8) else { return }

        // Typical lines:  "GPU Power: 3.27 W"  "ANE Power: 0.45 W"
        var gpuW: Double = 0
        var aneW: Double = 0
        for line in output.split(separator: "\n") {
            if line.contains("GPU Power") {
                gpuW = Double(line.components(separatedBy: CharacterSet(charactersIn: "0123456789.").inverted).joined()) ?? 0
            } else if line.contains("ANE Power") {
                aneW = Double(line.components(separatedBy: CharacterSet(charactersIn: "0123456789.").inverted).joined()) ?? 0
            }
        }

        // Normalize roughly (max GPU ≈ 15 W, ANE ≈ 5 W)
        DispatchQueue.main.async {
            self.gpuPercent = min((gpuW / 15.0) * 100.0, 100)
            self.anePercent = min((aneW / 5.0) * 100.0, 100)
        }
    }
}
