//
//  CPU_MeterApp.swift
//  CPU_Meter
//
//  This project was not written by a human developer.
//  All code and build scripts were generated by ChatGPT (GPT-5)
//  at the request of Jozef Belvončik.
//  Repository purpose: educational & experimental.
//
//  © 2025 Jozef Belvončik  MIT License
//

import SwiftUI
import AppKit
import Darwin

final class CPUUsageSampler: ObservableObject {
    @Published var overall: Double = 0
    private var prev: [[UInt32]] = []
    private var timer: Timer?

    init(interval: TimeInterval = 1.0) {
        sampleOnce()
        timer = .scheduledTimer(withTimeInterval: interval, repeats: true) { [weak self] _ in
            self?.sampleOnce()
        }
        RunLoop.main.add(timer!, forMode: .common)
    }
    deinit { timer?.invalidate() }

    private func sampleOnce() {
        var n: natural_t = 0
        var arr: processor_info_array_t?
        var cnt: mach_msg_type_number_t = 0
        guard host_processor_info(mach_host_self(), PROCESSOR_CPU_LOAD_INFO, &n, &arr, &cnt) == KERN_SUCCESS,
              let base = arr else { return }
        let stride = Int(CPU_STATE_MAX)
        let buf = UnsafeBufferPointer(start: base, count: Int(cnt))
        if prev.count != Int(n) { prev = Array(repeating: [0,0,0,0], count: Int(n)) }

        var sumBusy = 0.0, sumTotal = 0.0
        for i in 0..<Int(n) {
            let o = i * stride
            let u = UInt32(buf[o+Int(CPU_STATE_USER)])
            let s = UInt32(buf[o+Int(CPU_STATE_SYSTEM)])
            let nn = UInt32(buf[o+Int(CPU_STATE_NICE)])
            let id = UInt32(buf[o+Int(CPU_STATE_IDLE)])
            let du = Double(u &- prev[i][0])
            let ds = Double(s &- prev[i][1])
            let dn = Double(nn &- prev[i][2])
            let di = Double(id &- prev[i][3])
            let busy = du + ds + dn
            let total = busy + di
            sumBusy += busy; sumTotal += total
            prev[i] = [u,s,nn,id]
        }
        vm_deallocate(mach_task_self_, vm_address_t(bitPattern: base),
                      vm_size_t(cnt)*vm_size_t(MemoryLayout<integer_t>.stride))
        DispatchQueue.main.async { self.overall = sumTotal > 0 ? sumBusy/sumTotal : 0 }
    }
}

final class OverlayWindow: NSWindow {
    init(view: NSView) {
        super.init(contentRect: NSRect(x: 100, y: 100, width: 180, height: 80),
                   styleMask: [.borderless], backing: .buffered, defer: false)
        isOpaque = false
        backgroundColor = .clear
        level = .floating
        isMovableByWindowBackground = true
        collectionBehavior = [.canJoinAllSpaces]
        contentView = view
    }
    override var canBecomeKey: Bool { false }
}

struct OverlayView: View {
    @StateObject var cpu = CPUUsageSampler()
    var body: some View {
        Text(String(format: "CPU %.0f%%", cpu.overall*100))
            .font(.system(size: 20, weight: .bold, design: .rounded))
            .foregroundColor(.white)
            .padding(20)
            .background(.black.opacity(0.35))
            .clipShape(RoundedRectangle(cornerRadius: 12, style: .continuous))
    }
}

@main
struct CPU_MeterApp: App {
    @NSApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    var body: some Scene { Settings { EmptyView() } }
}

final class AppDelegate: NSObject, NSApplicationDelegate {
    var window: OverlayWindow?
    func applicationDidFinishLaunching(_ note: Notification) {
        let host = NSHostingView(rootView: OverlayView())
        window = OverlayWindow(view: host)
        window?.makeKeyAndOrderFront(nil)
        NSApp.setActivationPolicy(.accessory)
    }
}
